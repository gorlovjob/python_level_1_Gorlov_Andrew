
__author__ = 'Горлов Андрей Гарриевич'

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

print('Задача №1')

def fibonacci(n, m):
    ''' Данная функция генерирует ряд Фибоначчи и
    возвращает кусок ряда от n до m элемента'''
    
    fibo = []
    for i in range(m+1):
        if i == 0:
            fibo.append(0)
        elif i == 1:
            fibo.append(1)
        else:
            fibo.append(fibo[i - 2] + fibo[i - 1])
    return fibo[n:m+1]

print(fibonacci(5, 12))

input('Нажмите Enter, чтобы продолжить: ')
print('===========================================')

# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

print('Задача №2')

def sort_to_max(origin_list):
    ''' Данная функция производит сортировку "методом пузырька" '''
    
    for i in range(len(origin_list), 0, -1):
        for j in range(1, i):
            if origin_list[j - 1] > origin_list[j]:
                change = origin_list[j-1]
                origin_list[j - 1] = origin_list[j]
                origin_list[j] = change
    print(origin_list)

sort_to_max([2, 10, -12, 2.5, 20, -11, 4, 4, 0])

input('Нажмите Enter, чтобы продолжить: ')
print('===========================================')

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

print('Задача №3')

def my_own_filter(word, your_list):
    ''' Функция принимает слово и список, который нужно отфильтровать по введенному слову,
        перебирает элементы списка, сравнивая его со словом, и выводит список из совпадений'''
    
    res_list = []
    for i in your_list:
        if i == word:
            res_list.append(i)
    if len(res_list) == 0:
        print('Нет совпадений!')
    return res_list

start = ['апельсин', 'киви', 'банан', 'яблоко', 'мандарин', 'яблоко', 'виноград', 'груша', 'яблоко', 'грейпфрут']
print(my_own_filter('яблоко', start))
    
input('Нажмите Enter, чтобы продолжить: ')
print('===========================================')

# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.

print('Задача №3')

def center_point(ax1,ay1,bx2,by2):
    ''' Функция вычисляет координаты середины отрезка,
        который образуется между двух точек '''
    
    center_x1 = (ax1 + bx2)/2
    center_y1 = (ay1 + by2)/2
    return center_x1, center_y1

def is_paral(x1,y1,x2,y2,x3,y3,x4,y4):
    ''' Функция сравнивает координаты середин отрезкой одной пар точек с другой.
        Если хоть у одной пары точек координаты середин совпадают с другой парой точек,
        то все четыре точки образуют параллелограмм '''
    
    if center_point(x1,y1,x2,y2) == center_point(x3,y3,x4,y4) or center_point(x1,y1,x3,y3) == center_point(x2,y2,x4,y4) or center_point(x1,y1,x3,y3) == center_point(x2,y2,x4,y4):
        print('Точки A1({},{}), A2({},{}), A3({},{}) и A4({},{}) являются вершинами параллелограмма! '.format(x1,y1,x2,y2,x3,y3,x4,y4))
    else:
        print('Данные точки не являются вершинами параллелограмма!')

print('В качестве демонстрации переданы следующие координаты:')
print('A1(7,4), A2(-5,10), A3(-1,-2), A4(11,-8)')

is_paral(7,4,-5,10,-1,-2,11,-8)

input('Нажмите Enter, чтобы продолжить: ')
print('===========================================')
